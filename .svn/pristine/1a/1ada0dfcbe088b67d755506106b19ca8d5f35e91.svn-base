package com.test.controller;

import java.sql.Timestamp;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import com.test.dao.Hos_doctorDao;
import com.test.dao.HospitalDao;
import com.test.dao.Que_answerDao;
import com.test.dao.UserDao;
import com.test.entity.Hos_doctor;
import com.test.entity.Hospital;
import com.test.entity.Pagedata;
import com.test.entity.Que_answer;
import com.test.entity.User;



@Controller
public class controller {
	Map<Integer, User> users = new HashMap<Integer, User>();
	private User user;
	@Autowired
	private UserDao dao;
	@Autowired
	private Que_answerDao quedao;
	@Autowired
	private Hos_doctorDao docdao;
	@Autowired
	private HospitalDao hosdao; 
@RequestMapping("test")
	public void fun1(){
	System.out.println("hello");
}
@RequestMapping("Login")
public String fun2(String user_name,String user_password,HttpSession session) throws Exception{
user=dao.login(user_name, user_password);
if(user!=null){
	session.setAttribute("user", user);
	return "homepage";
}else{
	return "login";
}	
}
@RequestMapping("Register")
public String fun3(User user,String password){
	if(password.equals(user.getUser_password())){
dao.register(user);
return "login";
	}
return "register";
}
@RequestMapping("Revise")
public String fun4(User user){
dao.revise(user);
return "index";
}
@RequestMapping("Question")
public String fun5(Que_answer que){
Timestamp q = new Timestamp(new Date().getTime());
que.setQue_time(q);
quedao.ask(que);
return "index";
}
@RequestMapping("BrowseQue")
public String fun6(ModelMap mp,HttpSession session){
user=(User) session.getAttribute("user");
List<Que_answer> allque=quedao.browseque(user.getUser_id());
mp.addAttribute("allque",allque);
return "showque";
}
@RequestMapping("AnsQue")
public String fun7(Que_answer que,HttpSession session){
Timestamp a = new Timestamp(new Date().getTime());
user=(User) session.getAttribute("user");
System.out.println(user.getUser_id());
que.setQues_answer_id(user.getUser_id());
que.setAns_time(a);
quedao.ans(que);
return "index";
}
@RequestMapping("BrowseDoc")
public String fun8(ModelMap mp){
List<Que_answer> allanswer=quedao.findall();
List<Hos_doctor> alldoc=docdao.doc();
mp.addAttribute("alldoc",alldoc);
mp.addAttribute("allanswer",allanswer);
return "Health";
}
@RequestMapping("Doctor")
public String fun9(ModelMap mp,int id){
List<Que_answer> allans=quedao.browseans(id);
mp.addAttribute("allans",allans);
return "doctor";
}
@RequestMapping("Evaluate")
public void fun10(ModelMap mp,int i,int id){
	docdao.evaluate(i,id);
}
@RequestMapping("Myqa")
public String fun11(ModelMap mp,HttpSession session){
	user=(User) session.getAttribute("user");
	if(user.getUser_groupid()==1){
		List<Que_answer> unanswer=quedao.browseque(user.getUser_id());
		List<Que_answer> answer=quedao.browseans(user.getUser_id());
		mp.addAttribute("unanswer", unanswer);
		mp.addAttribute("answer", answer);
		return "ask-doc";
	}
		
		List<Que_answer> unanswer=quedao.quebrowse(user.getUser_id());
		List<Que_answer> answer=quedao.ansbrowse(user.getUser_id());
		mp.addAttribute("unanswer", unanswer);
		mp.addAttribute("answer", answer);
		return "ask-pat";
}
@RequestMapping("searchall")
public String fun2(HttpServletRequest request, ModelMap mp) throws Exception{
Pagedata pagedata = new Pagedata();
request.getParameter("currentpage");
	System.out.println("12121");
	int size = 5;
	int resultcount;
	int currentpage = (request.getParameter("currentpage")==null)?1:Integer.parseInt(request.getParameter("currentpage"));
	int sqllimitstart  = (currentpage-1)*size;
	List<Hospital> list = hosdao.SearchAll(117.210813,39.143929,sqllimitstart);
	System.out.println("12121"+list.get(1).getEva());
	resultcount = hosdao.Pagenext(117.210813,39.143929);
	pagedata.setResultCount(resultcount);
	System.out.println(pagedata.getResultCount());
	pagedata.setPageindex(currentpage);
	pagedata.setPageCount((resultcount%size==0)?resultcount/size:(resultcount/size+1));
	mp.addAttribute("listall", list);
	mp.addAttribute("pagedata", pagedata);
	System.out.println("resultcount"+resultcount);
	return "homepage";
	 
	
} 


@RequestMapping("searchbyeva")

public String fun3(HttpServletRequest request, ModelMap mp) throws Exception{
Pagedata pagedata = new Pagedata();
request.getParameter("currentpage");
System.out.println("12121");
int size = 5;
int resultcount;
int currentpage = (request.getParameter("currentpage")==null)?1:Integer.parseInt(request.getParameter("currentpage"));
System.out.println("currentpage"+currentpage);
int sqllimitstart  = (currentpage-1)*size;
System.out.println("sqllimitstart"+sqllimitstart);

List<Hospital> list = hosdao.Searchbyeva(117.210813,39.143929,sqllimitstart);
System.out.println("12121"+list.size());
resultcount = hosdao.Pagenext(117.210813,39.143929);
pagedata.setResultCount(resultcount);
System.out.println(pagedata.getResultCount());
pagedata.setPageindex(currentpage);
pagedata.setPageCount((resultcount%size==0)?resultcount/size:(resultcount/size+1));
mp.addAttribute("listall", list);
mp.addAttribute("pagedata", pagedata);
return "homepage2";
 

} 
@RequestMapping("Login1")
public ModelAndView doLogin0(User user, HttpServletRequest request) {
	System.out.println(user.getUser_id());
	System.out.println("0.0.0.0.0.0");
	request.getSession().setAttribute("uid", 110);
	request.getSession().setAttribute("name", 120);
	 
	System.out.println(users.size()+"user.size");
	System.out.println("session"+request.getSession().getAttribute("uid"));
	return new ModelAndView("redirect:talk.do");
}
@RequestMapping("Login2")
public ModelAndView doLogin1(User user, HttpServletRequest request) {
	System.out.println(user.getUser_id());
	System.out.println("0.0.0.0.0.0");
	request.getSession().setAttribute("uid", 110);
	request.getSession().setAttribute("name", 120);
	 
	System.out.println(users.size()+"user.size");
	System.out.println("session"+request.getSession().getAttribute("uid"));
	return new ModelAndView("redirect:talk.do");
}
//跳转到交谈聊天页面----病人端
	@RequestMapping(value = "talk", method = RequestMethod.GET)
	public ModelAndView talk(String fromuser,String from,String fromname) {
		
		ModelAndView mv = new ModelAndView("QandA");
		if(fromuser==null){
			mv.addObject("fromtouser", 120);
			System.out.println("病人1已登录");
		}else{
		mv.addObject("fromtouser", fromuser);
		mv.addObject("from", from);
		mv.addObject("fromname", fromname);
		}
		
		return mv;
	}
	//跳转到交谈聊天页面----医生端
		@RequestMapping(value = "talk2", method = RequestMethod.GET)
		public ModelAndView talk2(String fromuser,String from,String fromname) {
			//这里需要医生在登录的时候获取医生的id和姓名。	
			ModelAndView mv = new ModelAndView("QandA2");
			if(fromuser==null){
				mv.addObject("fromtouser", 120);
				System.out.println("病人1已登录");
			}else{
			mv.addObject("fromtouser", fromuser);
			mv.addObject("from", from);
			mv.addObject("fromname", fromname);
			
			}
			
			return mv;
		}
		/* 医师页面获取问题
		 * 参数两个
		 * Text
		 *docid
		 * */
		@RequestMapping(value = "askquestion", method = RequestMethod.POST)
		public void fun10(HttpServletRequest request){
			System.out.println("shuchu");
			request.getParameter("Text");
			request.getParameter("docid");
		 
		}
		/* 医师评价获取问题
		 * 参数一个
		 *eva
		 * */
		@RequestMapping(value = "doctoreva", method = RequestMethod.POST)
		public void fun11(HttpServletRequest request){
			 
			String eva = request.getParameter("eva");
			System.out.println(eva);
		 
		}

}
